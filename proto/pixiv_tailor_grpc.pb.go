// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: pixiv_tailor.proto

package pixiv_tailor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PixivTailorService_GetConfig_FullMethodName          = "/pixiv_tailor.PixivTailorService/GetConfig"
	PixivTailorService_UpdateConfig_FullMethodName       = "/pixiv_tailor.PixivTailorService/UpdateConfig"
	PixivTailorService_ExportConfig_FullMethodName       = "/pixiv_tailor.PixivTailorService/ExportConfig"
	PixivTailorService_ImportConfig_FullMethodName       = "/pixiv_tailor.PixivTailorService/ImportConfig"
	PixivTailorService_CreateTask_FullMethodName         = "/pixiv_tailor.PixivTailorService/CreateTask"
	PixivTailorService_GetTaskStatus_FullMethodName      = "/pixiv_tailor.PixivTailorService/GetTaskStatus"
	PixivTailorService_ListTasks_FullMethodName          = "/pixiv_tailor.PixivTailorService/ListTasks"
	PixivTailorService_CancelTask_FullMethodName         = "/pixiv_tailor.PixivTailorService/CancelTask"
	PixivTailorService_GetTaskProgress_FullMethodName    = "/pixiv_tailor.PixivTailorService/GetTaskProgress"
	PixivTailorService_GetTaskLogs_FullMethodName        = "/pixiv_tailor.PixivTailorService/GetTaskLogs"
	PixivTailorService_GetCrawlResults_FullMethodName    = "/pixiv_tailor.PixivTailorService/GetCrawlResults"
	PixivTailorService_GetGeneratedImages_FullMethodName = "/pixiv_tailor.PixivTailorService/GetGeneratedImages"
	PixivTailorService_GetTrainedModels_FullMethodName   = "/pixiv_tailor.PixivTailorService/GetTrainedModels"
	PixivTailorService_GetSystemInfo_FullMethodName      = "/pixiv_tailor.PixivTailorService/GetSystemInfo"
)

// PixivTailorServiceClient is the client API for PixivTailorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PixivTailorServiceClient interface {
	// 配置管理
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error)
	ExportConfig(ctx context.Context, in *ExportConfigRequest, opts ...grpc.CallOption) (*ExportConfigResponse, error)
	ImportConfig(ctx context.Context, in *ImportConfigRequest, opts ...grpc.CallOption) (*ImportConfigResponse, error)
	// 任务管理
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error)
	// 进度跟踪
	GetTaskProgress(ctx context.Context, in *GetTaskProgressRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskProgressUpdate], error)
	GetTaskLogs(ctx context.Context, in *GetTaskLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error)
	// 数据管理
	GetCrawlResults(ctx context.Context, in *GetCrawlResultsRequest, opts ...grpc.CallOption) (*GetCrawlResultsResponse, error)
	GetGeneratedImages(ctx context.Context, in *GetGeneratedImagesRequest, opts ...grpc.CallOption) (*GetGeneratedImagesResponse, error)
	GetTrainedModels(ctx context.Context, in *GetTrainedModelsRequest, opts ...grpc.CallOption) (*GetTrainedModelsResponse, error)
	// 系统监控
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error)
}

type pixivTailorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPixivTailorServiceClient(cc grpc.ClientConnInterface) PixivTailorServiceClient {
	return &pixivTailorServiceClient{cc}
}

func (c *pixivTailorServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*UpdateConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConfigResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_UpdateConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) ExportConfig(ctx context.Context, in *ExportConfigRequest, opts ...grpc.CallOption) (*ExportConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportConfigResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_ExportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) ImportConfig(ctx context.Context, in *ImportConfigRequest, opts ...grpc.CallOption) (*ImportConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportConfigResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_ImportConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) GetTaskStatus(ctx context.Context, in *GetTaskStatusRequest, opts ...grpc.CallOption) (*GetTaskStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskStatusResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_GetTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) CancelTask(ctx context.Context, in *CancelTaskRequest, opts ...grpc.CallOption) (*CancelTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelTaskResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_CancelTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) GetTaskProgress(ctx context.Context, in *GetTaskProgressRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TaskProgressUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PixivTailorService_ServiceDesc.Streams[0], PixivTailorService_GetTaskProgress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTaskProgressRequest, TaskProgressUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PixivTailorService_GetTaskProgressClient = grpc.ServerStreamingClient[TaskProgressUpdate]

func (c *pixivTailorServiceClient) GetTaskLogs(ctx context.Context, in *GetTaskLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PixivTailorService_ServiceDesc.Streams[1], PixivTailorService_GetTaskLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTaskLogsRequest, LogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PixivTailorService_GetTaskLogsClient = grpc.ServerStreamingClient[LogEntry]

func (c *pixivTailorServiceClient) GetCrawlResults(ctx context.Context, in *GetCrawlResultsRequest, opts ...grpc.CallOption) (*GetCrawlResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCrawlResultsResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_GetCrawlResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) GetGeneratedImages(ctx context.Context, in *GetGeneratedImagesRequest, opts ...grpc.CallOption) (*GetGeneratedImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGeneratedImagesResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_GetGeneratedImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) GetTrainedModels(ctx context.Context, in *GetTrainedModelsRequest, opts ...grpc.CallOption) (*GetTrainedModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrainedModelsResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_GetTrainedModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixivTailorServiceClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemInfoResponse)
	err := c.cc.Invoke(ctx, PixivTailorService_GetSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PixivTailorServiceServer is the server API for PixivTailorService service.
// All implementations must embed UnimplementedPixivTailorServiceServer
// for forward compatibility.
type PixivTailorServiceServer interface {
	// 配置管理
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error)
	ExportConfig(context.Context, *ExportConfigRequest) (*ExportConfigResponse, error)
	ImportConfig(context.Context, *ImportConfigRequest) (*ImportConfigResponse, error)
	// 任务管理
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error)
	// 进度跟踪
	GetTaskProgress(*GetTaskProgressRequest, grpc.ServerStreamingServer[TaskProgressUpdate]) error
	GetTaskLogs(*GetTaskLogsRequest, grpc.ServerStreamingServer[LogEntry]) error
	// 数据管理
	GetCrawlResults(context.Context, *GetCrawlResultsRequest) (*GetCrawlResultsResponse, error)
	GetGeneratedImages(context.Context, *GetGeneratedImagesRequest) (*GetGeneratedImagesResponse, error)
	GetTrainedModels(context.Context, *GetTrainedModelsRequest) (*GetTrainedModelsResponse, error)
	// 系统监控
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error)
	mustEmbedUnimplementedPixivTailorServiceServer()
}

// UnimplementedPixivTailorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPixivTailorServiceServer struct{}

func (UnimplementedPixivTailorServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedPixivTailorServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*UpdateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedPixivTailorServiceServer) ExportConfig(context.Context, *ExportConfigRequest) (*ExportConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConfig not implemented")
}
func (UnimplementedPixivTailorServiceServer) ImportConfig(context.Context, *ImportConfigRequest) (*ImportConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportConfig not implemented")
}
func (UnimplementedPixivTailorServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedPixivTailorServiceServer) GetTaskStatus(context.Context, *GetTaskStatusRequest) (*GetTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskStatus not implemented")
}
func (UnimplementedPixivTailorServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedPixivTailorServiceServer) CancelTask(context.Context, *CancelTaskRequest) (*CancelTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTask not implemented")
}
func (UnimplementedPixivTailorServiceServer) GetTaskProgress(*GetTaskProgressRequest, grpc.ServerStreamingServer[TaskProgressUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskProgress not implemented")
}
func (UnimplementedPixivTailorServiceServer) GetTaskLogs(*GetTaskLogsRequest, grpc.ServerStreamingServer[LogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method GetTaskLogs not implemented")
}
func (UnimplementedPixivTailorServiceServer) GetCrawlResults(context.Context, *GetCrawlResultsRequest) (*GetCrawlResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrawlResults not implemented")
}
func (UnimplementedPixivTailorServiceServer) GetGeneratedImages(context.Context, *GetGeneratedImagesRequest) (*GetGeneratedImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneratedImages not implemented")
}
func (UnimplementedPixivTailorServiceServer) GetTrainedModels(context.Context, *GetTrainedModelsRequest) (*GetTrainedModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrainedModels not implemented")
}
func (UnimplementedPixivTailorServiceServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedPixivTailorServiceServer) mustEmbedUnimplementedPixivTailorServiceServer() {}
func (UnimplementedPixivTailorServiceServer) testEmbeddedByValue()                            {}

// UnsafePixivTailorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PixivTailorServiceServer will
// result in compilation errors.
type UnsafePixivTailorServiceServer interface {
	mustEmbedUnimplementedPixivTailorServiceServer()
}

func RegisterPixivTailorServiceServer(s grpc.ServiceRegistrar, srv PixivTailorServiceServer) {
	// If the following call pancis, it indicates UnimplementedPixivTailorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PixivTailorService_ServiceDesc, srv)
}

func _PixivTailorService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_ExportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).ExportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_ExportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).ExportConfig(ctx, req.(*ExportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_ImportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).ImportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_ImportConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).ImportConfig(ctx, req.(*ImportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_GetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).GetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_GetTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).GetTaskStatus(ctx, req.(*GetTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_CancelTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).CancelTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_CancelTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).CancelTask(ctx, req.(*CancelTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_GetTaskProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PixivTailorServiceServer).GetTaskProgress(m, &grpc.GenericServerStream[GetTaskProgressRequest, TaskProgressUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PixivTailorService_GetTaskProgressServer = grpc.ServerStreamingServer[TaskProgressUpdate]

func _PixivTailorService_GetTaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PixivTailorServiceServer).GetTaskLogs(m, &grpc.GenericServerStream[GetTaskLogsRequest, LogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PixivTailorService_GetTaskLogsServer = grpc.ServerStreamingServer[LogEntry]

func _PixivTailorService_GetCrawlResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrawlResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).GetCrawlResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_GetCrawlResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).GetCrawlResults(ctx, req.(*GetCrawlResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_GetGeneratedImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneratedImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).GetGeneratedImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_GetGeneratedImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).GetGeneratedImages(ctx, req.(*GetGeneratedImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_GetTrainedModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrainedModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).GetTrainedModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_GetTrainedModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).GetTrainedModels(ctx, req.(*GetTrainedModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixivTailorService_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixivTailorServiceServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PixivTailorService_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixivTailorServiceServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PixivTailorService_ServiceDesc is the grpc.ServiceDesc for PixivTailorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PixivTailorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pixiv_tailor.PixivTailorService",
	HandlerType: (*PixivTailorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _PixivTailorService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _PixivTailorService_UpdateConfig_Handler,
		},
		{
			MethodName: "ExportConfig",
			Handler:    _PixivTailorService_ExportConfig_Handler,
		},
		{
			MethodName: "ImportConfig",
			Handler:    _PixivTailorService_ImportConfig_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _PixivTailorService_CreateTask_Handler,
		},
		{
			MethodName: "GetTaskStatus",
			Handler:    _PixivTailorService_GetTaskStatus_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _PixivTailorService_ListTasks_Handler,
		},
		{
			MethodName: "CancelTask",
			Handler:    _PixivTailorService_CancelTask_Handler,
		},
		{
			MethodName: "GetCrawlResults",
			Handler:    _PixivTailorService_GetCrawlResults_Handler,
		},
		{
			MethodName: "GetGeneratedImages",
			Handler:    _PixivTailorService_GetGeneratedImages_Handler,
		},
		{
			MethodName: "GetTrainedModels",
			Handler:    _PixivTailorService_GetTrainedModels_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _PixivTailorService_GetSystemInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTaskProgress",
			Handler:       _PixivTailorService_GetTaskProgress_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTaskLogs",
			Handler:       _PixivTailorService_GetTaskLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pixiv_tailor.proto",
}
